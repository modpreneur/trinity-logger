services:

    trinity.logger.elastic_log_service:
        class: Trinity\Bundle\LoggerBundle\Services\ElasticLogService
        arguments:
            - "%trinity.logger.elastic_host%"
            - "%trinity.logger.elastic_managed_index%"

    trinity.logger.elastic_log_service_with_ttl:
        class: Trinity\Bundle\LoggerBundle\Services\ElasticLogServiceWithTtl
        arguments:
            - "@trinity.logger.ttl_provider" #the service name is an alias, see TrinityLoggerExtension
            - "@trinity.logger.elastic_log_service"

    trinity.logger.elastic_read_log_service:
      class: Trinity\Bundle\LoggerBundle\Services\ElasticReadLogService
      arguments:
        - "%trinity.logger.elastic_host%"
        - '@doctrine.orm.default_entity_manager'
        - "%trinity.logger.elastic_managed_index%"
        - "%trinity.logger.base.entities.path%"

    trinity.logger.entity_action_listener:
        class: Trinity\Bundle\LoggerBundle\EventListener\EntityActionListener
        arguments:
            - "@security.token_storage"
            - "@event_dispatcher"
            - "@jms_serializer"
            - "@annotation_reader"
            - "@logger"
            - "@trinity.logger.user_provider" #the service name is an alias, see TrinityLoggerExtension
            - "%kernel.environment%"
        tags:
            - { name: doctrine.event_listener, event: preRemove }
            - { name: doctrine.event_listener, event: postRemove }
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: postUpdate }
            - { name: "kernel.event_listener", event: "trinity.logger.removeNotificationUser", method: "clearUserFromNotification" }
            - { name: "kernel.event_listener", event: "trinity.logger.setNotificationUser", method: "setUserFromNotification" }

    trinity.logger.elastic_logger_listener:
        class: Trinity\Bundle\LoggerBundle\EventListener\ElasticLoggerListener
        arguments:
            - "@trinity.logger.elastic_log_service_with_ttl"
        tags:
            - { name: kernel.event_listener, event: trinity.logger.elastic_logger_event, method: onLog }

    trinity.logger.database_handler:
        class: Trinity\Bundle\LoggerBundle\Services\DatabaseHandler
        arguments:
          - "@session"
          - "@security.token_storage"
          - "@request_stack"
          - "@trinity.logger.elastic_log_service_with_ttl"


    trinity.logger.default_ttl_provider:
        class: Trinity\Bundle\LoggerBundle\Services\DefaultTtlProvider